import os
import csv
import random
import requests
from jiwer import wer              # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ WER
from pydub import AudioSegment     # –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
TSV_PATH = "cv-corpus-21.0-delta-2025-03-14/ru/validated.tsv"
CLIPS_FOLDER = "cv-corpus-21.0-delta-2025-03-14/ru/clips"
SERVER_URL = "http://localhost:3000/transcribe"
TMP_MP3 = "tmp_input.mp3"
TMP_WAV = "tmp_input.wav"
NUM_SAMPLES = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ TSV-—Ñ–∞–π–ª–∞
def read_validated_samples(tsv_path, min_text_len=10):
    samples = []
    with open(tsv_path, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter="\t")
        for row in reader:
            sentence = row["sentence"].strip()
            mp3_path = os.path.join(CLIPS_FOLDER, row["path"].strip())
            if os.path.isfile(mp3_path) and len(sentence.split()) >= min_text_len:
                samples.append({"text": sentence, "mp3": mp3_path})
    return samples

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def convert_to_wav(mp3_path, wav_path):
    audio = AudioSegment.from_file(mp3_path)
    audio = audio.set_channels(1).set_frame_rate(16000)
    audio.export(wav_path, format="wav")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
def send_to_server(wav_path):
    with open(wav_path, "rb") as f:
        files = {"audio": ("audio.wav", f, "audio/wav")}
        response = requests.post(SERVER_URL, files=files)
        response.raise_for_status()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ 4xx/5xx
        return response.json().get("text", "").strip()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
def main():
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã...")
    samples = read_validated_samples(TSV_PATH)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(samples)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.")

    if not samples:
        print("‚ùå –ù–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.")
        return

    selected = random.sample(samples, min(NUM_SAMPLES, len(samples)))
    total_wer = 0
    tested = 0

    for i, sample in enumerate(selected):
        try:
            print(f"\nüîä [{i+1}] {os.path.basename(sample['mp3'])}")
            convert_to_wav(sample["mp3"], TMP_WAV)
            recognized = send_to_server(TMP_WAV)

            ref = sample["text"]
            curr_wer = wer(ref, recognized)
            total_wer += curr_wer
            tested += 1

            print(f"üìù –û–∂–∏–¥–∞–µ—Ç—Å—è:  {ref}")
            print(f"ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized}")
            print(f"üìâ WER: {curr_wer:.2%}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ: {e}")

    if tested:
        avg_wer = total_wer / tested
        print(f"\nüìä –°—Ä–µ–¥–Ω–∏–π WER –ø–æ {tested} –ø—Ä–∏–º–µ—Ä–∞–º: {avg_wer:.2%}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if os.path.exists(TMP_WAV):
        os.remove(TMP_WAV)

if __name__ == "__main__":
    main()
